import java.awt.EventQueue;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ContainerAdapter;
import java.awt.event.ContainerEvent;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;

//Much of this class was auto-generated by eclipse's window-maker
public class Admin extends JFrame 
{
	public static Admin instance;
	private JPanel contentPane;
	//Initial list
	public static UserGroup rootGroup = new UserGroup("Root");
	
	public Admin()
	{
		//Create window
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(200, 200, 600, 400);
		contentPane = new JPanel();
		contentPane.setBackground(SystemColor.activeCaption);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		//Create objects
		final JTextArea userNameInputArea = new JTextArea();
		final JTextArea userGroupInputArea = new JTextArea();
		final JTextArea showUserInputArea = new JTextArea();
		final JTextArea userList = new JTextArea();
		
		userNameInputArea.setBounds(195, 25, 160, 35);
		contentPane.add(userNameInputArea);
		
		userGroupInputArea.setBounds(195, 85, 160, 35);
		contentPane.add(userGroupInputArea);
		
		showUserInputArea.setBounds(195, 145, 160, 35);
		contentPane.add(showUserInputArea);
		
		//Init the UserList
		userList.setBounds(5, 5, 160, 350);
		userList.setText(listToString());
		userList.setEditable(false);
		contentPane.add(userList);
		
		/*
		 * Note about adding users:
		 * Since I chose not to use a Jtree, I would need to implement additional
		 * buttons and methods, etc. in order to insert a user in a specific spot.
		 * Instead, I chose to simply limit groups to three component members.
		 * And adding to subgroups if the group list is full.
		 * I implemented this here rather than back in Usergroup on the off chance that I will
		 * re-use that code.
		*/
		//Add user button
		JButton addUserButt = new JButton("Add User");
		addUserButt.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent arg0)
			{
				if(rootGroup.getGroup().size() < 3)
				{
					rootGroup.add(new User(userNameInputArea.getText()));
				}
				else
				{
					fullGroupAdd(new User(userNameInputArea.getText()), rootGroup);
				}
				userList.setText(rootGroup.toString());
			}
		});
		addUserButt.setBounds(380, 5, 180, 50);
		contentPane.add(addUserButt);
		
		//Adds User Group button
		JButton addUserGrpButt = new JButton("Add Group");
		addUserGrpButt.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent arg0)
			{
				if(rootGroup.getGroup().size() < 3)
				{
					rootGroup.add(new UserGroup(userGroupInputArea.getText()));
				}
				else
				{
					fullGroupAdd(new UserGroup(userGroupInputArea.getText()), rootGroup);
				}
				userList.setText(rootGroup.toString());
			}
		});
		addUserGrpButt.setBounds(380, 65, 180, 50);
		contentPane.add(addUserGrpButt);
		
		/*
		 * Because of the above implementation, the user inputs a name
		 * and the program searches for the first instance of this person 
		 * to look at.
		*/
		//Opens the UserUI TODO: make multiple windows
		JButton opnUsrView = new JButton("Open User View");
		opnUsrView.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent arg0)
			{
				User user = rootGroup.findUser(showUserInputArea.getText(), rootGroup);
				if(user != null)
				{
					UserUI ui = new UserUI(user);
					ui.run();
				}
				else
					System.out.println("Not Found!");
			}
		});
		opnUsrView.setBounds(380, 125, 180, 50);
		contentPane.add(opnUsrView);
		
		//Show total users button
		JButton showUserTtlButt = new JButton("Show User Total");
		showUserTtlButt.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent arg0)
			{
				int num = 0;
				numUserVisitor visitor = new numUserVisitor();
				num += visitor.visit(rootGroup);
				
				JOptionPane.showMessageDialog(instance, "The total number of Users: " + num);
			}
		});
		showUserTtlButt.setBounds(198, 220, 176, 50);
		contentPane.add(showUserTtlButt);
		
		//Show Group Total Button
		JButton showTtlGrpsButt = new JButton("Show Group Total");
		showTtlGrpsButt.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent arg0)
			{
				int num = 0;
				numGroupsVisitor visitor = new numGroupsVisitor();
				num += visitor.visit(rootGroup);
				JOptionPane.showMessageDialog(instance, "The total number of Groups: " + num);
			}
		});
		showTtlGrpsButt.setBounds(386, 220, 188, 50);
		contentPane.add(showTtlGrpsButt);
		
		//Show total # of messages button
		JButton showTtlMsgButt = new JButton("Show Messages Total");
		showTtlMsgButt.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent arg0) 
			{
				int num = 0;
				numTweetsVisitor visitor = new numTweetsVisitor();
				num += visitor.visit(rootGroup);
				JOptionPane.showMessageDialog(instance, "The total number of Tweets: " + num);
			}
		});
		showTtlMsgButt.setBounds(198, 281, 176, 50);
		contentPane.add(showTtlMsgButt);
		
		//Show Positive Percentage button
		JButton showPosPercButt = new JButton("Show Positive Percentage");
		showPosPercButt.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent arg0)
			{
				double num = 0.0;
				int denom = 0;
				numPositiveVisitor visitorPos = new numPositiveVisitor();
				numTweetsVisitor visitorNum = new numTweetsVisitor();
				num += visitorPos.visit(rootGroup);
				denom += visitorNum.visit(rootGroup);
				
				JOptionPane.showMessageDialog(instance, "The percentage of positive tweets: " + ((num/denom)*100));
			}
		});
		showPosPercButt.setBounds(386, 281, 188, 50);
		contentPane.add(showPosPercButt);
		
		//Make Labels
		JLabel lblEnterUserId = new JLabel("Enter User ID:");
		lblEnterUserId.setBounds(195, 5, 100, 20);
		contentPane.add(lblEnterUserId);
		
		JLabel lblEnterGroupId = new JLabel("Enter Group ID:");
		lblEnterGroupId.setBounds(195, 65, 100, 20);
		contentPane.add(lblEnterGroupId);
		
		JLabel lblEnterShowUser = new JLabel("User to view: ");
		lblEnterShowUser.setBounds(195, 125, 100, 20);
		contentPane.add(lblEnterShowUser);
	}
	//Launches the frame
	public void run()
	{
		EventQueue.invokeLater(new Runnable() 
		{
			public void run() 
			{
				try
				{
					Admin frame = new Admin();
					frame.setVisible(true);
				} 
				catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		});
	}
	
	//singleton getInstance method
	public Admin getInstance()
	{
		if(instance == null)
		{
			instance = new Admin();
		}
		return instance;
	}
	
	//toString for the root group
	private String listToString()
	{
		return rootGroup.toString();
	}
	
	//for adding to a full group
	private boolean fullGroupAdd(Component comp, UserGroup group)
	{
		if(group.getGroup().size() < 3)
		{
			group.add(comp);
			return true;
		}
		else
		{
			ArrayList<Component> groupList = group.getGroup();
			for(Component comps: groupList)
			{
				if(comps.isGroup())
				{
					if(fullGroupAdd(comp, (UserGroup)comps))
					{
						return true;
					}
				}
			}
			return false;
		}
	}
}
